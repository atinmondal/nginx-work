user                            nginx;
worker_processes                {{ workers }};
error_log                       /var/log/nginx.log;

events
{
    worker_connections          1024;
    accept_mutex                off;
}

http
{
    gzip                          on;
    gzip_min_length               100;
    gzip_proxied                  expired no-cache no-store private auth;
    gzip_types                    text/plain application/xml text/css application/x-javascript text/javascript application/javascript;
    gzip_disable                  "MSIE [1-6]\.";
    server_names_hash_bucket_size 128;

    {% if supports_realip_module == true %}
    set_real_ip_from 172.31.0.0/16;
    real_ip_header X-Forwarded-For;
    {% endif %}

    tcp_nopush                  on;
    tcp_nodelay                 off;
    ssl_session_cache           shared:SSL:10m;
    ssl_session_timeout         10m;
    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;

    underscores_in_headers      on;
    types_hash_max_size         2048;
    include                     mime.types;
    default_type                application/octet-stream;

    client_max_body_size        50m;

    sendfile                    on;
    server_tokens               off;
    keepalive_timeout           65;

    {% for service_container in service_containers %}
    {% for upstream in service_container.upstreams %}
    upstream {{ upstream.name }}
    {
        {% for private_ip in upstream.private_ips %}
        server {{private_ip}}:{{upstream.port.container}};
        {% endfor # upstream.private_ips %}
    }
    {% endfor # service_container.upstreams %}
    {% endfor # service_containers %}

    {% for service_container in service_containers %}
    {% for upstream in service_container.upstreams %}
    {% if upstream.port.http != blank %}
    server
    {
        listen                  {{ upstream.port.http }};

        add_header                  X-Backend-Server  $hostname;

        {% for ip in blacklist %}
        deny {{ ip }};
        {% endfor %}

        if ($http_x_forwarded_proto = "http") {
            rewrite ^(.*) https://$host$1 permanent;
        }

        {% if red_www == 0 %}
        server_name             {{ upstream.traffic_matches }};
        {% endif %}
        {% if red_www == 2 %}
        if ($http_host ~ ^(?!www\.)(.*)) {
          return 301 $scheme://www.$1$request_uri;
        }
        {% endif %}
        {% if red_www == 1 %}
        if ($http_host ~ ^www\.(.*)$) {
          return 301 $scheme://$1$request_uri;
        }
        {% endif %}
        keepalive_timeout       5;

        client_max_body_size    50m;
        # redirect on errors
        error_page              500 502 504 /50x.html;

        # handle error redirect
        location = /50x.html
        {
            proxy_pass http://s3.amazonaws.com/placeholders.cloud66.com/nginx/50x.html;
        }


        {% if cors_enabled == true %}
        # Cross domain resource
        add_header Access-Control-Allow-Origin "{{ cors_origin }}";
        add_header Access-Control-Allow-Methods "{{ cors_methods }}";
        {% endif %}

        {% if maintenance_mode_active and upstream.port.http == 80 %}
        location /
        {
            root /etc/cloud66/pages;
            rewrite ^(.*)$ /cloud66_maintenance.html break;
        }
        {% else %}
        location /
        {
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_redirect          off;

# This VPC's subnet - tells nginx it is ok for the proxy to rewrite the address
            set_real_ip_from 172.17.0.0/16;

# The client's real IP address
            real_ip_header    X-Forwarded-For;

            allow 172.17.0.0/16;
            allow 107.22.40.20/32;
            allow 18.204.162.155/32;
            allow 18.205.173.45/32;
            allow 18.214.156.84/32;
            allow 18.214.70.5/32;
            allow 18.215.226.36/32;
            allow 3.208.174.173/32;
            allow 3.210.128.175/32;
            allow 3.210.236.187/32;
            allow 3.213.138.44/32;
            allow 3.215.91.250/32;
            allow 3.218.236.95/32;
            allow 3.220.18.219/32;
            allow 3.221.145.110/32;
            allow 3.221.27.116/32;
            allow 3.228.208.40/32;
            allow 3.228.39.90/32;
            allow 3.230.64.42/32;
            allow 34.203.54.214/32;
            allow 54.158.189.197/32;
            allow 3.232.229.135/32;
            allow 3.91.130.126/32;
            allow 34.194.144.202/32;
            allow 34.194.94.201/32;
            allow 34.197.16.179/32;
            allow 34.197.216.176/32;
            allow 34.201.89.115/32;
            allow 34.224.255.169/32;
            allow 34.234.114.131/32;
            allow 34.234.155.57/32;
            allow 34.235.217.146/32;
            allow 34.237.39.108/32;
            allow 35.168.141.9/32;
            allow 35.168.185.185/32;
            allow 35.169.17.173/32;
            allow 35.174.249.131/32;
            allow 35.174.253.146/32;
            allow 35.186.223.98/32;
            allow 35.190.85.91/32;
            allow 35.227.192.226/32;
            allow 52.1.192.124/32;
            allow 52.1.8.4/32;
            allow 52.20.166.242/32;
            allow 52.20.179.68/32;
            allow 52.201.143.12/32;
            allow 52.201.16.186/32;
            allow 52.206.105.184/32;
            allow 52.21.113.94/32;
            allow 52.21.153.129/32;
            allow 52.21.22.43/32;
            allow 52.22.187.0/32;
            allow 52.22.215.219/32;
            allow 52.22.234.12/32;
            allow 52.3.128.216/32;
            allow 52.4.195.249/32;
            allow 52.44.71.247/32;
            allow 52.5.58.121/32;
            allow 52.54.23.4/32;
            allow 52.54.49.197/32;
            allow 52.6.30.12/32;
            allow 52.6.77.249/32;
            allow 52.72.72.233/32;
            allow 52.72.73.201/32;
            allow 52.72.82.116/32;
            allow 52.86.112.36/32;
            allow 54.144.204.41/32;
            allow 54.144.212.75/32;
            allow 54.152.247.4/32;
            allow 54.161.182.76/32;
            allow 54.162.196.253/32;
            allow 54.164.161.41/32;
            allow 54.167.72.230/32;
            allow 54.198.111.202/32;
            allow 54.205.138.102/32;
            allow 54.209.115.53/32;
            allow 54.209.152.141/32;
            allow 54.211.118.70/32;
            allow 54.224.160.225/32;
            allow 54.226.126.177/32;
            allow 54.227.245.241/32;
            allow 54.236.146.161/32;
            allow 54.236.156.101/32;
            allow 54.81.162.133/32;
            allow 54.83.41.200/32;
            allow 54.86.61.112/32;
            allow 54.88.8.42/32;
            allow 54.90.69.135/32;
            allow 52.90.56.101/32;
            allow 54.92.235.88/32;
            deny all;

            proxy_pass              http://{{ upstream.name }};
            break;
        }
        {% endif %}
    }
    {% endif # if upstream.port.http != blank %}

    {% if allow_ssl == true %}
    {% if upstream.port.https != blank %}
    server
    {
        listen                    {{ upstream.port.https }};
        ssl                       on;
        ssl_ciphers               'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;
        ssl_dhparam               /etc/ssl/private/dhparams.pem;
        ssl_certificate_key       /etc/ssl/localcerts/{{ ssl_certificate_filename }}.key;
        ssl_certificate           /etc/ssl/localcerts/{{ ssl_certificate_filename }}.crt;

        {% for ip in blacklist %}
        deny {{ ip }};
        {% endfor %}

        {% if red_www == 0 %}
        server_name             {{ upstream.traffic_matches }};
        {% endif %}
        {% if red_www == 2 %}
        if ($http_host ~ ^(?!www\.)(.*)) {
          return 301 $scheme://www.$1$request_uri;
        }
        {% endif %}
        {% if red_www == 1 %}
        if ($http_host ~ ^www\.(.*)$) {
          return 301 $scheme://$1$request_uri;
        }
        {% endif %}

        client_max_body_size    50m;

        # redirect on errors
        error_page              500 502 504 /50x.html;

        # handle error redirect
        location = /50x.html
        {
            proxy_pass http://s3.amazonaws.com/placeholders.cloud66.com/nginx/50x.html;
        }

        {% if cors_enabled == true %}
        # Cross domain resource
        add_header Access-Control-Allow-Origin "{{ cors_origin }}";
        add_header Access-Control-Allow-Methods "{{ cors_methods }}";
        {% endif %}

        {% if maintenance_mode_active and upstream.port.https == 443 %}
        location /
        {
            root /etc/cloud66/pages;
            rewrite ^(.*)$ /cloud66_maintenance.html break;
        }
        {% else %}
        location /
        {
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        Host $http_host;
            proxy_set_header        X-Forwarded-Proto https;
            proxy_redirect          off;
            proxy_pass              http://{{ upstream.name }};
            break;
        }
        {% endif %}
    }
    {% endif # if upstream.port.https != blank %}
    {% endif # if allow_ssl == true %}

    {% endfor # service_container.upstreams %}
    {% endfor # service_containers %}
}

